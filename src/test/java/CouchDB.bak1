grammar CouchDB;

@header{package org.hyperledger.fabric.chaincode.query.antlr;}    


fragment LETTER
    : [a-zA-Z$_]
    ;
fragment LETTERORDIGIT
    : LETTER
    | [0-9]
    ;

fragment DIGIT
    : [0-9]
    ;



fragment ESC :    '\\"' | '\\\\' | '\'';
//fragment ESC :'\\' ([''\\/bfnrt]) ;
//
STRING:   '\''  (ESC | .)*? '\' '
          | '#' (ESC | .)*? '# '; 
          
          


SELECT :  'SELECT'; 
QUERY  :  'query';
DESCRIPTION : 'description';
WHERE  :  'WHERE';
BY     :  'BY';
ORDER  :  'ORDER';
AND    :  'AND';
OR     :  'OR';
ASC    :  'ASC';
DESC   :  'DESC';
LIMIT   :  'LIMIT';
BOOKMARK : 'BOOKMARK';
CONTAINS : 'CONTAINS';
TRUE : 'TRUE';
FALSE : 'FALSE';
FROM : 'FROM';
IN   :  'IN';
   
EQ : '==';
GTE : '>=';                   
GT : '>'; 
LT : '<';
LTE : '<=';
NE : '!=';





logicalOperator
    : AND | OR 
    ;


comparisonOperator
    : EQ | GTE | GT | LT | LTE | NE
    ;
    
LEFT_PAREN:                '(';

RIGHT_PAREN:               ')';


propName
    : Identifier  
    ;


descriptionClause
     : DESCRIPTION  STRING
     ; 

queries
      : queryClause
        descriptionClause?
        selectClause?  
         fromClause       
        ( whereClause )?   
        ( orderByClause )?        
        ( limitClause )?
        ( bookmarkClause )?
       ; 
 
 


qualifiedName : Identifier ('.' Identifier)*;

Identifier : ('a'.. 'z' | 'A'.. 'Z' | '_') ('a'.. 'z' | 'A'.. 'Z' | '_' | '$' |  '0'.. '9')*;

queryClause
    : QUERY  Identifier
    ;

selectClause 
    : SELECT    selectFields 
    ;



selectFields
    : Identifier (',' Identifier)*
    ;

fromClause 
    : FROM qualifiedName
    ;
        
whereClause 
    : WHERE   whereExpr = expression
    ;
    
expression
     : expression logicalOperator expression
     | qualifiedName comparisonOperator value    
     | LEFT_PAREN expression RIGHT_PAREN
     | propName CONTAINS LEFT_PAREN expression RIGHT_PAREN
     | qualifiedName IN value
     ;
 

DECIMAL_VALUE
    : DIGIT+ '.' DIGIT*
    | '.' DIGIT+
    ;

INTEGER_VALUE
    : DIGIT+
    ;

//BOOLEAN_VALUE
//    : TRUE | FALSE
//    ;
        
value 
    : STRING 
    | TRUE
    | FALSE
    | DECIMAL_VALUE
    | INTEGER_VALUE
    ;

orderByClause
    : ORDER BY orderByExpression (',' orderByExpression)*
    ;       

orderByExpression
    : propName  ((ASC | DESC)? |  STRING)
    ; 
 
 
    
limitClause
    : LIMIT STRING
    | LIMIT INTEGER_VALUE
    ;
   
bookmarkClause
    : BOOKMARK  STRING
    ;

   

SIMPLE_COMMENT
    : '--' ~[\r\n]* '\r'? '\n'? -> channel(HIDDEN)
    ;

BRACKETED_EMPTY_COMMENT
    : '/**/' -> channel(HIDDEN)
    ;
 
 
BRACKETED_COMMENT
    : '/*' ~[+] .*? '*/' -> channel(HIDDEN)
    ;

WS
    : [ \r\n\t]+ -> channel(HIDDEN)
    ;

// Catch-all for anything we can't recognize.
// We use this to be able to ignore and recover all the text
// when splitting statements with DelimiterLexer
//UNRECOGNIZED
//    : . ;
